/*
Copyright 2015 Mfg labs.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
package com.mfglabs
package precepte
package corecats
package default



/** Abstract Name/Value Tag used to classify your Precepte's Step */
abstract class Tag(val name: String, val value: String)

/** A tag to represent the surrounding function/block calling the Precepte */
case class Callee(override val value: String) extends Tag("callee", value) {
  override def toString = s"callee($value)"
}

/** A tag to represent a custom category having a meaning in the context of your code organisation */
abstract class Category(value: String) extends Tag("category", value) {
  override def toString = s"category($value)"
}

object Category {
  def unapply(c: Category) = Some(c.value)

  object Api extends Category("api")
  object Database extends Category("database")
}

/** a tag to represent the environment in which the Precepte is run (Test, Dev, Staging, Prod, etc...) */
abstract class Environment(value: String) extends Tag("environment", value)

object Environment {
  object Test extends Environment("test")
  object Dev extends Environment("dev")
  object Staging extends Environment("staging")
  object Production extends Environment("production")
}

/** a tag to represent the host on which the Precepte is run */
case class Host(override val value: String) extends Tag("host", value)

/** a tag to represent the version of current code */
case class Version(override val value: String) extends Tag("version", value)

/** The typed environment in which the Precepte is run */
trait Env

/** */
case class BaseEnv(host: Host, environment: Environment, version: Version) extends Env

/** the default tagging information for a Precepte's step using a callee and a category */
case class BaseTags(callee: Callee, category: Category) extends Tags  {
  override def toString = s"($callee, $category)"
}

/** A call just identifies locally a step in Precepte using a local PId generated by Precepte
  * and some tags defined by the developer at compile-time.
  */
case class Call[T <: Tags](id: PId, tags: T)

object Call {
  /** a call path is just a sequence of tuples (PID, tags) */
  type Path[T <: Tags] = Vector[Call[T]]
}


/** Span is a global & unique ID for a Precepte's step
  * 
  * Span is provided with the initial state at runtime
  * and can be shared among different functions, parts of code, systems local & remote.
  */
case class Span(value: String) extends AnyVal {
  override def toString = s"span($value)"
}

object Span {
  /** default generator of Span using UUID */
  def gen = Span(java.util.UUID.randomUUID.toString)
}

/** PId is a local ID generated by Precepte in the context of a step */
case class PId(value: String) extends AnyVal {
  override def toString = s"pid($value)"
}

object PId {
  /** The defauld PId generator using an AtomicInteger */
  val i = new java.util.concurrent.atomic.AtomicInteger(1)
  def gen = PId(i.getAndIncrement().toString) //scala.util.Random.alphanumeric.take(7).mkString)
}


/** A PId Series generatinc PID that behaves like a State Monad taking previous PIDSeries
  * and returning a new PId and next series
  */
trait PIdSeries {
  def run(): (PId, PIdSeries)
}

case object DefaultPIdSeries extends PIdSeries {
  def run() = PId.gen -> DefaultPIdSeries
}

case class PIdStream(ids: Stream[PId] = Stream.continually(PId.gen)) extends PIdSeries {
  def run() = ids.head -> PIdStream(ids.tail)
}

/** The default ManagedState for precepte using a Env, a Span & a Call path that accumulates tuples of (PId, Tags)
  * along the execution worflow
  */
case class ManagedState[E <: Env, T <: Tags](env: E, span: Span, path: Call.Path[T], ids: PIdSeries = DefaultPIdSeries)

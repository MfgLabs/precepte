/*
Copyright 2015 Mfg labs.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */
package com.mfglabs
package precepte
package default

import java.util.concurrent.atomic.AtomicLong

/** Abstract Name/Value Tag used to classify your Precepte's Step */
abstract class Tag(val name: String) {
  def value: String
}

/** A tag to represent the surrounding function/block calling the Precepte */
final case class Callee(value: String) extends Tag("callee") {
  override def toString = s"callee($value)"
}

/** A tag to represent a custom category having a meaning in the context of your code organisation */
abstract class Category(val value: String) extends Tag("category") {
  override def toString = s"category($value)"
}

object Category {
  @inline def unapply(c: Category): Option[String] = Some(c.value)

  object Api extends Category("api")
  object Database extends Category("database")
}

/** a tag to represent the environment in which the Precepte is run (Test, Dev, Staging, Prod, etc...) */
abstract class Environment(val value: String) extends Tag("environment")

object Environment {
  object Test extends Environment("test")
  object Dev extends Environment("dev")
  object Staging extends Environment("staging")
  object Production extends Environment("production")
}

/** a tag to represent the host on which the Precepte is run */
final case class Host(value: String) extends Tag("host")

/** a tag to represent the version of current code */
final case class Version(value: String) extends Tag("version")

final case class BaseEnv(host: Host, environment: Environment, version: Version)

/** the default tagging information for a Precepte's step using a callee and a category */
final case class BaseTags(callee: Callee, category: Category) {
  override def toString = s"(${callee.toString}, ${category.toString})"
}

/** A call just identifies locally a step in Precepte using a local PId generated by Precepte
  * and some tags defined by the developer at compile-time.
  */
final case class Call[Tags](id: PId, tags: Tags)

object Call {

  /** a call path is just a sequence of tuples (PID, tags) */
  type Path[Tags] = Vector[Call[Tags]]
}

/** Span is a global & unique ID for a Precepte's step
  *
  * Span is provided with the initial state at runtime
  * and can be shared among different functions, parts of code, systems local & remote.
  */
final case class Span(value: String) extends AnyVal {
  override def toString = s"span($value)"
}

object Span {

  /** default generator of Span using UUID */
  @inline def gen: Span = Span(java.util.UUID.randomUUID.toString)
}

/** PId is a local ID generated by Precepte in the context of a step */
final case class PId(namespace: String, id: BigInt) {
  final val name: String = s"${namespace}_${id.toString()}"
  override def toString = s"pid($name)"
}

object PId {

  /** The defauld PId generator using an AtomicInteger */
  private val i: AtomicLong =
    new java.util.concurrent.atomic.AtomicLong(1)
  def gen: PId =
    PId("", BigInt(i.getAndIncrement()))

  implicit val PIdOrdering: Ordering[PId] =
    Ordering[(String, BigInt)].on(x => (x.namespace, x.id))
}

/** The default ManagedState for precepte using a Env, a Span & a Call path that accumulates tuples of (PId, Tags)
  * along the execution worflow
  */
final case class ManagedState[Env, Tags](env: Env,
                                         span: Span,
                                         path: Call.Path[Tags],
                                         ids: EndlessStream[PId] =
                                           EndlessStream.continually(PId.gen))
